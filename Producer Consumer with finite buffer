4.1.6 Finite buffer producer-consumer solution

Constraints:
• While an item is being added to or removed from the buffer, the buffer is
in an inconsistent state. Therefore, threads must have exclusive access to
the buffer.

• If a consumer thread arrives while the buffer is empty, it blocks until a
producer adds a new item.

• If a producer arrives when the buffer is full, it blocks until a consumer
removes an item.



Here is a solution.

init() {
  mutex = Semaphore (1)
  items = Semaphore (0)
  spaces = Semaphore (buffer.size())
}

Finite buffer consumer solution

consumer() {
  items.wait ()  // wait till item is produced

  mutex.wait ()  // wait on mutex to excess buffer
  event = buffer.get ()
  mutex.signal ()  // signal mutex for buffer

  spaces.signal ()  // signal space is available

  event.process ()  //process the event
}


The producer code is symmetric, in a way:
Finite buffer producer solution

producer() {
  event = waitForEvent ()  // All threads wait for event to come

  spaces.wait ()    // first check if space is available
  
  mutex.wait ()     // wait on mutex to get excess of buffer
  buffer.add(event); 
  mutex.signal ()   // signal mutex for buffer

  items.signal ()    // signal items are available
}


In order to avoid deadlock, producers and consumers check availability before getting the mutex. For best performance, they release the mutex before
signaling
